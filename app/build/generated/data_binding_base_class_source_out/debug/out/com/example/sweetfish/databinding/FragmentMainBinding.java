// Generated by view binder compiler. Do not edit!
package com.example.sweetfish.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.utils.widget.ImageFilterView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.sweetfish.R;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final SwipeRefreshLayout Refresh;

  @NonNull
  public final ImageFilterView avatar;

  @NonNull
  public final RecyclerView commodities;

  @NonNull
  public final EditText editSearchInfo;

  @NonNull
  public final ImageView searchImage;

  @NonNull
  public final MaterialCardView searchPanel;

  @NonNull
  public final ConstraintLayout topPanel;

  private FragmentMainBinding(@NonNull ConstraintLayout rootView,
      @NonNull SwipeRefreshLayout Refresh, @NonNull ImageFilterView avatar,
      @NonNull RecyclerView commodities, @NonNull EditText editSearchInfo,
      @NonNull ImageView searchImage, @NonNull MaterialCardView searchPanel,
      @NonNull ConstraintLayout topPanel) {
    this.rootView = rootView;
    this.Refresh = Refresh;
    this.avatar = avatar;
    this.commodities = commodities;
    this.editSearchInfo = editSearchInfo;
    this.searchImage = searchImage;
    this.searchPanel = searchPanel;
    this.topPanel = topPanel;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Refresh;
      SwipeRefreshLayout Refresh = ViewBindings.findChildViewById(rootView, id);
      if (Refresh == null) {
        break missingId;
      }

      id = R.id.avatar;
      ImageFilterView avatar = ViewBindings.findChildViewById(rootView, id);
      if (avatar == null) {
        break missingId;
      }

      id = R.id.commodities;
      RecyclerView commodities = ViewBindings.findChildViewById(rootView, id);
      if (commodities == null) {
        break missingId;
      }

      id = R.id.editSearchInfo;
      EditText editSearchInfo = ViewBindings.findChildViewById(rootView, id);
      if (editSearchInfo == null) {
        break missingId;
      }

      id = R.id.searchImage;
      ImageView searchImage = ViewBindings.findChildViewById(rootView, id);
      if (searchImage == null) {
        break missingId;
      }

      id = R.id.searchPanel;
      MaterialCardView searchPanel = ViewBindings.findChildViewById(rootView, id);
      if (searchPanel == null) {
        break missingId;
      }

      id = R.id.topPanel;
      ConstraintLayout topPanel = ViewBindings.findChildViewById(rootView, id);
      if (topPanel == null) {
        break missingId;
      }

      return new FragmentMainBinding((ConstraintLayout) rootView, Refresh, avatar, commodities,
          editSearchInfo, searchImage, searchPanel, topPanel);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
