// Generated by view binder compiler. Do not edit!
package com.example.sweetfish.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.utils.widget.ImageFilterView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.sweetfish.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class SearchUserItemsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageFilterView avatar;

  @NonNull
  public final TextView fansNum;

  @NonNull
  public final Button follow;

  @NonNull
  public final TextView turnover;

  @NonNull
  public final TextView username;

  private SearchUserItemsBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageFilterView avatar, @NonNull TextView fansNum, @NonNull Button follow,
      @NonNull TextView turnover, @NonNull TextView username) {
    this.rootView = rootView;
    this.avatar = avatar;
    this.fansNum = fansNum;
    this.follow = follow;
    this.turnover = turnover;
    this.username = username;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SearchUserItemsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SearchUserItemsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.search_user_items, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SearchUserItemsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.avatar;
      ImageFilterView avatar = ViewBindings.findChildViewById(rootView, id);
      if (avatar == null) {
        break missingId;
      }

      id = R.id.fansNum;
      TextView fansNum = ViewBindings.findChildViewById(rootView, id);
      if (fansNum == null) {
        break missingId;
      }

      id = R.id.follow;
      Button follow = ViewBindings.findChildViewById(rootView, id);
      if (follow == null) {
        break missingId;
      }

      id = R.id.turnover;
      TextView turnover = ViewBindings.findChildViewById(rootView, id);
      if (turnover == null) {
        break missingId;
      }

      id = R.id.username;
      TextView username = ViewBindings.findChildViewById(rootView, id);
      if (username == null) {
        break missingId;
      }

      return new SearchUserItemsBinding((ConstraintLayout) rootView, avatar, fansNum, follow,
          turnover, username);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
